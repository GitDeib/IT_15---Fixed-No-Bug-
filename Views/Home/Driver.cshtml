@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Driver")]
@model DriverDashboardViewModel
@using IT15_Project.Models;

<!-- Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" crossorigin="anonymous" />

<!-- Bootstrap -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<!-- Mapbox -->
<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />
<script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.css" rel="stylesheet" />

<!-- Fullscreen Map -->
<div id="map" class="position-fixed start-0 w-100" style="top: 85px; bottom: 60px; z-index: 0;"></div>

<!-- Sidebar Button (Floating) -->
<div id="pullHandle" class="position-fixed top-50 translate-middle-y" style="right: 0; z-index: 1050;">
    <button type="button"
            class="btn bg-dark text-white rounded-start-pill px-3 py-2 shadow-sm d-flex align-items-center"
            data-bs-toggle="offcanvas" data-bs-target="#passavail" aria-label="Show Details"
            style="border-top-right-radius: 0; border-bottom-right-radius: 0;">
        <i class="fas fa-users me-2"></i>
        <span class="d-none d-md-inline">Details</span>
    </button>
</div>

<!-- Offcanvas Sidebar: Ride Details / Available Passengers -->
<div class="offcanvas offcanvas-end shadow" tabindex="-1" id="passavail" data-bs-backdrop="false" data-bs-scroll="true">
    <div class="offcanvas-header bg-white border-bottom py-3">
        <div>
            <h5 class="offcanvas-title fw-semibold text-dark">Ride Details</h5>
            @if (Model.ActiveBooking != null)
            {
                <span class="badge @(Model.ActiveBooking.Status switch {
                    BookingStatus.Accepted => "bg-warning",
                    BookingStatus.Started => "bg-primary",
                    BookingStatus.Completed => Model.ActiveBooking.PaymentStatus == PaymentStatus.Unpaid ? "bg-danger" : "bg-success",
                    _ => "bg-secondary"
                })">
                    @Model.ActiveBooking.Status
                    @(Model.ActiveBooking.Status == BookingStatus.Completed && Model.ActiveBooking.PaymentStatus == PaymentStatus.Unpaid ? " (Unpaid)" : "")
                </span>
            }
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body bg-light">
        @if (Model.Driver.Status != "Verified")
        {
            <div class="alert alert-warning rounded-3 shadow-sm" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                You must be verified to accept bookings.
            </div>
        }

        @if (Model.ActiveBooking != null)
        {
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="bg-success bg-opacity-10 rounded-circle p-3 me-3">
                            <img src="~/uploads/profilephotos/@Model.ActiveBooking.User?.ProfilePhotoPath"
                                 alt="Passenger Photo"
                                 class="rounded-circle"
                                 style="width: 40px; height: 40px; object-fit: cover;">
                        </div>
                        <div>
                            <p class="text-muted mb-0">Passenger: @Model.ActiveBooking.User?.FullName</p>
                            <small class="text-muted d-block"><i class="fas fa-phone me-1"></i> @Model.ActiveBooking.User?.PhoneNumber</small>
                        </div>
                    </div>

                    <div class="mb-4">
                        <h6 class="text-muted mb-2"><i class="fas fa-map-marker-alt text-primary me-2"></i>Pickup Location</h6>
                        <div class="fw-medium">@Model.ActiveBooking.PickupLocation</div>
                    </div>

                    <div class="mb-4">
                        <h6 class="text-muted mb-2"><i class="fas fa-location-dot text-danger me-2"></i>Destination</h6>
                        <div class="fw-medium">@Model.ActiveBooking.DropoffLocation</div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-6">
                            <h6 class="text-muted mb-1">
                                <i class="fas fa-road me-2"></i>Distance
                            </h6>
                            <div class="fw-medium">@Model.ActiveBooking.DistanceInKm.ToString("0.00") km</div>
                        </div>

                        <div class="col-6">
                            <h6 class="text-muted mb-1">
                                <i class="fas fa-clock me-2"></i>Est. Time
                            </h6>
                            <div class="fw-medium">@Model.ActiveBooking.EstimatedTimeInMinutes mins</div>
                        </div>

                        @if (Model.ActiveBooking.Status == BookingStatus.Completed)
                        {
                            <div class="col-6 mt-3">
                                <h6 class="text-muted mb-1">
                                    <i class="fas fa-clock me-2"></i>Actual Time
                                </h6>
                                <div class="fw-medium">@Model.ActiveBooking.ActualTimeInMinutes?.ToString("0.0") mins</div>
                            </div>

                            <div class="col-6 mt-3">
                                <h6 class="text-muted mb-1">
                                    <i class="fas fa-money-bill me-2"></i>Final Fare
                                </h6>
                                <div class="fw-medium text-success">₱@Model.ActiveBooking.FinalFare?.ToString("0.00")</div>
                            </div>
                        }
                        else
                        {
                            <div class="col-12 text-center mt-3">
                                <h6 class="text-muted mb-1">
                                    <i class="fas fa-money-bill me-2"></i>Estimated Fare
                                </h6>
                                <div class="fw-medium text-success">₱@Model.ActiveBooking.EstimatedFare.ToString("0.00")</div>
                            </div>
                        }
                    </div>

                    @if (Model.ActiveBooking.Status == BookingStatus.Accepted)
                    {
                        <form asp-action="StartRide" method="post" class="mb-2">
                            <input type="hidden" name="bookingId" value="@Model.ActiveBooking.Id" />
                            <button type="submit" class="btn btn-primary w-100 rounded-pill shadow-sm">
                                <i class="fas fa-play-circle me-2"></i> Start Ride
                            </button>
                        </form>
                    }
                    else if (Model.ActiveBooking.Status == BookingStatus.Started)
                    {
                        <form asp-action="CompleteRide" method="post" class="mb-2">
                            <input type="hidden" name="bookingId" value="@Model.ActiveBooking.Id" />
                            <button type="submit" class="btn btn-success w-100 rounded-pill shadow-sm">
                                <i class="fas fa-flag-checkered me-2"></i> Complete Ride
                            </button>
                        </form>
                    }
                    else if (Model.ActiveBooking.Status == BookingStatus.Completed && Model.ActiveBooking.PaymentStatus == PaymentStatus.Unpaid)
                    {
                        <div class="alert alert-warning rounded-3 shadow-sm" role="alert">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            Waiting for passenger payment. Route will remain visible until payment is received.
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <h6 class="fw-bold mb-3">Available Passengers</h6>

            @functions {
                string GetTimeAgo(DateTime dateTime)
                {
                    var timeSpan = DateTime.Now - dateTime;

                    if (timeSpan.TotalSeconds < 60)
                        return $"{(int)timeSpan.TotalSeconds} secs ago";
                    if (timeSpan.TotalMinutes < 60)
                        return $"{(int)timeSpan.TotalMinutes} mins ago";
                    if (timeSpan.TotalHours < 24)
                        return $"{(int)timeSpan.TotalHours} hrs ago";
                    if (timeSpan.TotalDays < 30)
                        return $"{(int)timeSpan.TotalDays} days ago";
                    if (timeSpan.TotalDays < 365)
                        return $"{(int)(timeSpan.TotalDays / 30)} months ago";

                    return $"{(int)(timeSpan.TotalDays / 365)} yrs ago";
                }
            }

            @foreach (var passenger in Model.AvailablePassengers)
            {
                <div class="card shadow-sm border-0 mb-3">
                    <div class="card-body p-4">
                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-success bg-opacity-10 rounded-circle p-3 me-3">
                                <img src="~/uploads/profilephotos/@passenger.User?.ProfilePhotoPath"
                                     alt="Passenger Photo"
                                     class="rounded-circle"
                                     style="width: 40px; height: 40px; object-fit: cover;">
                            </div>

                            <div>
                                <h6 class="fw-bold mb-1">@passenger.User?.FullName</h6>
                                <p class="text-muted mb-0">@GetTimeAgo(passenger.RequestedAt)</p>
                            </div>
                        </div>

                        <div class="mb-3">
                            <h6 class="text-muted mb-2"><i class="fas fa-map-marker-alt text-primary me-2"></i>Pickup</h6>
                            <div class="fw-medium">@passenger.PickupLocation</div>
                        </div>

                        <div class="mb-3">
                            <h6 class="text-muted mb-2"><i class="fas fa-location-dot text-danger me-2"></i>Destination</h6>
                            <div class="fw-medium">@passenger.DropoffLocation</div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-6">
                                <h6 class="text-muted mb-1">
                                    <i class="fas fa-road me-2"></i>Distance
                                </h6>
                                <div class="fw-medium">@passenger.DistanceInKm.ToString("0.00") km</div>
                            </div>

                            <div class="col-6">
                                <h6 class="text-muted mb-1">
                                    <i class="fas fa-clock me-2"></i>Est. Time
                                </h6>
                                <div class="fw-medium">@passenger.EstimatedTimeInMinutes mins</div>
                            </div>

                            <div class="col-12 text-center mt-3">
                                <h6 class="text-muted mb-1">
                                    <i class="fas fa-money-bill me-2"></i>Estimated Fare
                                </h6>
                                <div class="fw-medium text-success">₱@passenger.EstimatedFare.ToString("0.00")</div>
                            </div>
                        </div>

                        @if (Model.Driver.Status == "Verified")
                        {
                            <form asp-action="AcceptBooking" asp-controller="Home" method="post">
                                <input type="hidden" name="bookingId" value="@passenger.Id" />
                                <button type="submit" class="btn btn-outline-success w-100 rounded-pill shadow-sm">
                                    <i class="fas fa-check-circle me-2"></i> Accept
                                </button>
                            </form>
                        }
                        else
                        {
                            <button class="btn btn-secondary w-100 rounded-pill shadow-sm" disabled>
                                <i class="fas fa-lock me-2"></i> Verify First
                            </button>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- Mapbox Helper Script -->
<script src="~/js/DriverMap.js"></script>

<script>
    // Initialize map with active booking if exists
    @if (ViewBag.ActiveBooking != null)
    {
        var booking = ViewBag.ActiveBooking;
        <text>
            map.on('load', function () {
                // Set pickup and dropoff markers
                const pickupMarker = new mapboxgl.Marker({ color: 'blue' })
                    .setLngLat([@booking.PickupLongitude, @booking.PickupLatitude])
                    .addTo(map);

                const dropoffMarker = new mapboxgl.Marker({ color: 'red' })
                    .setLngLat([@booking.DropoffLongitude, @booking.DropoffLatitude])
                    .addTo(map);

                // Set route
                directions.setOrigin([@booking.PickupLongitude, @booking.PickupLatitude]);
                directions.setDestination([@booking.DropoffLongitude, @booking.DropoffLatitude]);

                // Fit map to show both markers
                const bounds = new mapboxgl.LngLatBounds();
                bounds.extend([@booking.PickupLongitude, @booking.PickupLatitude]);
                bounds.extend([@booking.DropoffLongitude, @booking.DropoffLatitude]);
                map.fitBounds(bounds, { padding: 50 });
            });
        </text>
    }

    const offcanvasElement = document.getElementById('passavail');
    const pullHandle = document.getElementById('pullHandle');

    if (offcanvasElement && pullHandle) {
        offcanvasElement.addEventListener('show.bs.offcanvas', function () {
            pullHandle.style.display = 'none';
        });

        offcanvasElement.addEventListener('hidden.bs.offcanvas', function () {
            pullHandle.style.display = 'block';
        });
    }
</script>
